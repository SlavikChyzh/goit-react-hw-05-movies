{"version":3,"file":"static/js/187.3f09cf6e.chunk.js","mappings":"wNAIMA,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,GAAsCC,EAAAA,EAAAA,YAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACQC,EAAkCJ,EAAlCI,KAAMC,EAA4BL,EAA5BK,UAAWC,EAAiBN,EAAjBM,aAKzB,OAHAC,EAAAA,EAAAA,IAAcD,GAAcE,MAAK,SAAAC,GAC/BN,EAAeM,EAChB,KAEC,iCACE,gBAAKC,IAAKR,EAAaS,IAAKP,EAAMQ,MAAM,SACxC,wBAAKR,KACL,uBAAIC,MAGT,E,gBCXKQ,EAAO,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwBb,EAAAA,EAAAA,UAAS,IAAjC,eAAOe,EAAP,KAAaC,EAAb,KACMC,GAAcC,EAAAA,EAAAA,SAAO,GAY3B,OAVAC,EAAAA,EAAAA,YAAU,WACJF,EAAYG,UACdH,EAAYG,SAAU,GACtBC,EAAAA,EAAAA,IAAiBR,GAASN,MAAK,SAAAe,GAC7BN,EAAQM,EACT,IAGJ,GAAE,CAACT,KAGF,+BACE,SAAC,KAAD,CAAeU,UAAU,SAAzB,SACGR,EAAKS,OAAL,OACCT,QADD,IACCA,OADD,EACCA,EAAMU,KAAI,SAAA1B,GACR,OACE,SAAC,KAAD,WACE,SAACD,EAAD,CAAOC,MAAOA,KADDA,EAAM2B,QAIxB,KAED,sCAKT,C","sources":["components/Actor/Actor.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { fetchActorImg } from 'Services/API';\nimport PropTypes from 'prop-types';\n\nconst Actor = ({ actor }) => {\n  const [actorImgUrl, setActorImgUrl] = useState();\n  const { name, character, profile_path } = actor;\n\n  fetchActorImg(profile_path).then(resp => {\n    setActorImgUrl(resp);\n  });\n  return (\n    <>\n      <img src={actorImgUrl} alt={name} width=\"100\" />\n      <h3>{name}</h3>\n      <p>{character}</p>\n    </>\n  );\n};\n\nexport { Actor };\n\nActor.propTypes = {\n  actor: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    profile_path: PropTypes.string,\n    character: PropTypes.string.isRequired,\n  }),\n};\n","import { Actor } from 'components/Actor/Actor';\nimport { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { StyledActorUl, StyledLi } from 'StyledTags/Tags.styled';\n\nimport { fetchMovieActors } from '../../Services/API';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const firstRender = useRef(true);\n\n  useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n      fetchMovieActors(movieId).then(response => {\n        setCast(response);\n      });\n    }\n    return;\n  }, [movieId]);\n\n  return (\n    <>\n      <StyledActorUl className=\"actors\">\n        {cast.length ? (\n          cast?.map(actor => {\n            return (\n              <StyledLi key={actor.cast_id}>\n                <Actor actor={actor} />\n              </StyledLi>\n            );\n          })\n        ) : (\n          <p>No Cast</p>\n        )}\n      </StyledActorUl>\n    </>\n  );\n};\n\nexport { Cast };\n"],"names":["Actor","actor","useState","actorImgUrl","setActorImgUrl","name","character","profile_path","fetchActorImg","then","resp","src","alt","width","Cast","movieId","useParams","cast","setCast","firstRender","useRef","useEffect","current","fetchMovieActors","response","className","length","map","cast_id"],"sourceRoot":""}